#region Copyright (c) 2004-2010 by SharpCrafters s.r.o.

/*----------------------------------------------------------------------------*
 *   This file is part of compile-time components of PostSharp.                *
 *                                                                             *
 *   This library is free software: you can redistribute it and/or modify      *
 *   it under the terms of the version 3 of the GNU General Public License     *
 *   as published by the Free Software Foundation.                             *
 *                                                                             *
 *   This library is distributed in the hope that it will be useful,           *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of            *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             *
 *   GNU General Public License for more details.                              *
 *                                                                             *
 *   You should have received a copy of the GNU General Public License         *
 *   along with this library.  If not, see <http://www.gnu.org/licenses/>.     *
 *                                                                             *
 *----------------------------------------------------------------------------*/

#endregion


using System.Reflection;
using System.Runtime.CompilerServices;
using PostSharp.CodeModel;

namespace PostSharp.Extensibility
{
    /// <summary>
    /// Some hard-coded workarounds of some compiler's behaviours.
    /// </summary>
    public static class CompilerWorkarounds
    {
        /// <summary>
        /// Determines whether a <see cref="TypeDefDeclaration"/> is generated by the compiler.
        /// </summary>
        /// <param name="type">Type.</param>
        /// <returns><b>true</b> if the <paramref name="type"/> has been generated by the compiler,
        /// otherwise <b>false</b>.</returns>
        /// <remarks>
        /// Normally, a compiler should annotate the artefacts it generates by the 
        /// <see cref="CompilerGeneratedAttribute"/>. However, there are some exceptions requiring
        /// hard coding implemented in this this method.
        /// </remarks>
        public static bool IsCompilerGenerated(TypeDefDeclaration type)
        {
            // There is a special trick with VB COM classes: when a class is annotated with the [ComClass]
            // attribute, the compiler will generate an interface as a nested type. 
            if ((type.Attributes & TypeAttributes.Interface) != 0 &&
                type.DeclaringType != null && type.Name[0] == '_')
            {
                string parentTypeName = type.DeclaringType.Name;
                int pos = parentTypeName.LastIndexOf('.');
                if (pos > 0)
                    parentTypeName = parentTypeName.Substring(pos + 1);
                if (type.Name == "_" + parentTypeName)
                {
                    // The type matches. Checks if the parent type is a ComClass.
                    foreach (CustomAttributeDeclaration attribute in type.DeclaringType.CustomAttributes)
                    {
                        INamedType attributeType = (INamedType)attribute.Constructor.DeclaringType;
                        if (attributeType.Name == "Microsoft.VisualBasic.ComClassAttribute" &&
                            attributeType.DeclaringAssembly.Name == "Microsoft.VisualBasic")
                            return true;
                    }
                }
            }

            return false;
        }

          /// <summary>
        /// Determines whether a <see cref="Declaration"/> is generated by the compiler.
        /// </summary>
        /// <param name="declaration">A declaration.</param>
        /// <returns><b>true</b> if the <paramref name="declaration"/> has been generated by the compiler,
        /// otherwise <b>false</b>.</returns>
       /// <remarks>
        /// Normally, a compiler should annotate the artefacts it generates by the 
        /// <see cref="CompilerGeneratedAttribute"/>. However, there are some exceptions requiring
        /// hard coding implemented in this this method.
        /// </remarks>
        public static bool IsCompilerGenerated(MetadataDeclaration declaration)
        {
            switch ( declaration.GetTokenType() )
            {
                case TokenType.TypeDef:
                    return IsCompilerGenerated( (TypeDefDeclaration) declaration );

                case TokenType.MethodDef:
                    return IsCompilerGenerated( ((MethodDefDeclaration) declaration).DeclaringType );

                case TokenType.FieldDef:
                    return IsCompilerGenerated( ((FieldDefDeclaration) declaration).DeclaringType );

                default:
                    return false;
            }
            
        }

    }
}